#
# Vanilla
#

snippet module "module" b
module ${1:MyModule}
  ${0}
end
endsnippet

snippet class "class" b
class ${1:MyClass}
  init${0}
end
endsnippet

snippet init "initializer" b
def initialize${1:(${2:argument})}
  ${0}
end
endsnippet

#
# RSpec
#
snippet spec "new spec file" b
# encoding: UTF-8
require 'spec_helper'

desc${0}
endsnippet

snippet desc "describe" b
describe ${1:ClassUnderTest} do
  it${0}
end
endsnippet

snippet descm "describe in a module" b
module ${1:SomeModule}
  describe ${2:ClassUnderTest} do
    it${0}
  end
end
endsnippet

snippet it "it does something" b
it "${1:does something}" do
  ${0}
end
endsnippet

snippet be "before each" b
before { ${1} }
${0}
endsnippet

snippet bee "before each do" b
before do
  ${1}
end
${0}
endsnippet

snippet cont "context" b
context "${1}" do
  ${0}
end
endsnippet

snippet let "let" b
let(:${1:variable}) { ${2} }
${0}
endsnippet

snippet shr "should_receive" w
should_receive(:${1})${0}
endsnippet
