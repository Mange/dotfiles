#!/usr/bin/env zsh
# vim: ft=sh
# Shell function to build up my current prompt settings.

# Prompt has three sections on both sides, with background gradient between the
# different sections.
function apply_prompt_theme {
  local theme="${1:-$MANGE_THEME}"

  # Set up colors
  # shellcheck source=/home/mange/.config/shells/catppuccin
  source "${XDG_CONFIG_HOME:-$HOME/.config}/shells/catppuccin"

  ###
  ### Left 3
  ### OS icon + user + hostname
  ###
  local os_icon="%F{blue}$(os-icon)"

  # Don't show user at all if it's expected username
  local user
  if [[ $USER != "mange" ]]; then
    # Color user differently if we have a privileged user ("!")
    user="%(!.%F{red}%n.%F{blue}%n)"
  fi

  # Same with host. Only show on remote connections!
  local host
  if [[ -n $SSH_CLIENT ]]; then
    host="%F{blue}%m%f"
    # user + host different? Show a colored "@" between them
    if [[ -n "$user" ]]; then
      host="%B%F{magenta}@${host}"
    fi
  fi

  local left3="${os_icon}${user}${host}"

  ###
  ### Left 2
  ### Path (smart, based on VCS root if possible)
  ###

  # NOTE: Will not be used directly in the prompt, instead it will be included
  # through $vcs_info_msg_0_.
  # Reference:
  #   %r = Repository name
  #   %S = subdirectory within repo
  local repo_dir=" %F{cyan}%r%F{magenta}î‚»%F{blue}%S "
  local norm_dir=" %F{blue}%4~ "
  local left2='$vcs_info_msg_0_'

  ###
  ### Left 1
  ### Actually empty right now
  ###
  local left1=''

  ###
  ### Prompt
  ### Changes depending on VI input mode, so it dynamically calls a function.
  ###
  local prompt_left='$(prompt_end_character)%f%k%b '
  local prompt_right='%f%k%b$(prompt_start_character)'

  ###
  ### Right 1
  ### Exit status + Duration + Jobs
  ###
  local last_status='%(?.%F{green} âœ” .%F{red} âœ˜ )'
  local duration='$(prompt_slow_command_duration)'
  local jobs="%(1j.%F{magenta} ðŸ—— %j %f.)"
  local right1="${last_status}${duration}${jobs}"

  ###
  ### Right 2
  ### Branch + VCS status
  ###

  # Modify how the branch is rendered. Here's the trick:
  # 1. Show information in this order: unstaged, staged, branch
  # 2. Each info changes foreground color.
  # Now if there's staged stuff, the branch will show in that color. If there's
  # unstaged stuff, then it will be in that color. On both, the staged will
  # win.
  # Branch will default to blue, and unstaged to red, and staged to green.
  zstyle ':vcs_info:*:prompt:*' unstagedstr "%F{red} ï¢“"
  zstyle ':vcs_info:*:prompt:*' stagedstr "%F{green} ï¢›"

  # NOTE: Will not be used directly in the prompt, instead it will be included
  # through $vcs_info_msg_1_.
  # Reference:
  #   %a = Action
  #   %b = Branch
  #   %c = stagedstr (if anything staged)
  #   %u = unstagedstr (if anything unstaged)
  local vcs_status="$(prompt_separator diagonal 2 yellow)%F{black} %a %f$(prompt_separator diagonal yellow 2)"
  local branch_and_status="%F{blue}%u%c %b %f"
  local right2='$vcs_info_msg_1_'

  ###
  ### Right 3
  ### Clock
  ###
  local clock="%F{white} %D{%H:%M} %f"
  local right3="${clock}"

  #
  # Set up ZSH's built-in VCS modules to be able to populate the modules.
  #

  # Format outside of repos
  zstyle ':vcs_info:*:prompt:*' nvcsformats "${norm_dir}" ""
  # Inside repos
  zstyle ':vcs_info:*:prompt:*' formats "${repo_dir}" "${branch_and_status}"
  zstyle ':vcs_info:*:prompt:*' actionformats "${repo_dir}" "${vcs_status}${branch_and_status}"

  #
  # Actually set up the PROMPT and RPROMPT variables
  #

  local newline=$'\n'
  export PROMPT="${newline}$(prompt_separator bubble_left 0 3)${left3}$(prompt_separator diagonal 3 2)${left2}${left1}${prompt_left}"
  export RPROMPT="${prompt_right}${right1}$(prompt_separator diagonal 1 2)${right2}$(prompt_separator diagonal 2 3)${right3}$(prompt_separator bubble_right 3 0)"
}

function module_color {
  local section=$1
  case $section in
  0)
    echo default
    ;;
  1)
    echo $theme_bg_l1
    ;;
  2)
    echo $theme_bg_l2
    ;;
  3)
    echo $theme_bg_l3
    ;;
  *)
    echo $section
    ;;
  esac
}

function prompt_separator {
  local type=$1
  local from=$2
  local to=$3

  local color_from="$(module_color $from)"
  local color_to="$(module_color $to)"

  case $type in
  diagonal)
    echo "%F{$color_from}%K{$color_to}î‚¼%f"
    ;;
  pyramid_right)
    echo "%F{$color_from}%K{$color_to}î‚°%f"
    ;;
  pyramid_left)
    echo "%F{$color_to}%K{$color_from}î‚²%f%K{$color_to}"
    ;;
  bubble_right)
    echo "%F{$color_from}%K{$color_to}î‚´%f"
    ;;
  bubble_left)
    echo "%F{$color_to}%K{$color_from}î‚¶%f%K{$color_to}"
    ;;
  empty)
    echo "%K{$color_to}%f"
    ;;
  esac
}

# Show mode information by the last character in the prompt
function prompt_end_character {
  zle_mode_output "$(prompt_separator pyramid_right 2 0)" "$(prompt_separator bubble_right 2 0)"
}

function prompt_start_character {
  zle_mode_output "$(prompt_separator pyramid_left 0 1)" "$(prompt_separator bubble_left 0 1)"
}

function prompt_slow_command_duration {
  if [[ -n "$_mange_last_cmd_duration" ]] && ((_mange_last_cmd_duration >= 5)); then
    echo -n "%F{yellow}ï•ª $(seconds-to-human $_mange_last_cmd_duration) %f"
  fi
}

apply_prompt_theme "$@"
