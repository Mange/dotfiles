#!/bin/zsh

setopt extendedglob
zmodload zsh/datetime
autoload -Uz add-zsh-hook

# Chain with true to avoid $? being false
[ -f "${XDG_CONFIG_HOME}/zsh/zshrc.before.local" ] && source "${XDG_CONFIG_HOME}/zsh/zshrc.before.local" || true

# {{{ Autoload functions
# upstream
autoload zmv

# my own
autoload seconds-to-human
autoload apply_prompt_theme
# }}}
# {{{ umask
# I want my primary group to write to my files
# Why wouldn't I?
umask 002
# }}}
# {{{ ZLE, vi mode

# New line
bindkey -M viins '^J' self-insert

### FZF stuff
bindkey -M vicmd "/" fzf-history-widget
bindkey "^P" fzf-file-widget

# Vim-like bindings
# Stolen from https://github.com/sharat87/zsh-vim-mode/blob/master/zsh-vim-mode.plugin.zsh

# Fix more vim-like bindings (instead of vi)
# vi bindings do not kill beyond the start of Insert mode (e.g. enter insert
# and press backspace and nothing happens)
bindkey "^W" backward-kill-word    # vi-backward-kill-word
bindkey "^H" backward-delete-char  # vi-backward-delete-char
bindkey "^U" backward-kill-line    # vi-kill-line
bindkey "^?" backward-delete-char  # vi-backward-delete-char

bindkey -M vicmd 'yy' vi-yank-whole-line
bindkey -M vicmd 'Y' vi-yank-eol

bindkey -M vicmd 'u' undo
bindkey -M vicmd '^R' redo

bindkey -M vicmd 'K' run-help

# Load editor support
autoload edit-command-line
zle -N edit-command-line
bindkey -M vicmd 'v' edit-command-line

# Shift-Space with Extended Keys should insert space in insert mode and do
# nothing in command mode.
# (Default is to delete everything on the line without adding to killring or
# make it possible to undo.)
bindkey -M viins -s '^[[32;2u' ' '
bindkey -M vicmd -s '^[[32;2u' ' '

# See extra bindkey calls under the Plugins section

# Outputs $1 when on insert mode and outputs $2 when on command mode.
# zle_mode_output "when insert" "when command"
function zle_mode_output {
  # Keymap could be empty sometimes; assume insert mode
  case $KEYMAP in
    ("vicmd") echo -n $2;;
    (*) echo -n $1
  esac
}

# Apply correct cursor style and reset prompt when switching vi modes.
function zle-keymap-select zle-line-init
{
  # Switch between blinking line (│) and block (█) depending on mode
  zle_mode_output $'\x1b[\x35 q' $'\x1b[\x32 q'
  zle reset-prompt
  zle -R
}
zle -N zle-line-init
zle -N zle-keymap-select

# }}}
# {{{ Completions

# Find out what an alias stands for and complete like if it was the original command
# This gives me git completion for my git aliases, for example
setopt nocomplete_aliases

zstyle ':completion:*' cache-path "${XDG_CACHE_HOME}/zsh-completioncache"

# Use verbose completions (usually adds descriptions / context to matches)
zstyle ':completion:*' verbose yes

# Approximate when no matches can be found – corrects small errors
zstyle ':completion:*' completer _complete _approximate

# Environments to assume when autocompleting sudo
# In case I didn't already have all the sbin dirs in PATH, I would add them here
zstyle ':complete:sudo:' environ HOME="/root"

# Commands that should be completed like other commands
compdef run-changed-specs=rspec

# Show completion group names
zstyle ':completion:*:descriptions' format "%d"

### fzf-tab
zstyle ":completion:*:git-checkout:*" sort false
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# give a preview when completing `kill`
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm,cmd -w -w"
zstyle ':fzf-tab:complete:kill:argument-rest' fzf-flags '--preview=echo $(<{f})' --preview-window=down:3:wrap

zstyle ':fzf-tab:complete:systemctl-*:*' fzf-preview 'SYSTEMD_COLORS=1 systemctl status $word'
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' fzf-preview 'echo ${(P)word}'

# Git previews
zstyle ':fzf-tab:complete:git-(add|diff|restore):*' fzf-preview 'git diff $word | delta'
zstyle ':fzf-tab:complete:git-log:*' fzf-preview 'git log --color=always $word'
zstyle ':fzf-tab:complete:git-help:*' fzf-preview 'git help $word | bat -plman --color=always'
zstyle ':fzf-tab:complete:git-show:*' fzf-preview \
  'case "$group" in
  "commit tag") git show --color=always $word ;;
  *) git show --color=always $word | delta ;;
  esac'
zstyle ':fzf-tab:complete:git-checkout:*' fzf-preview \
  'case "$group" in
  "modified file") git diff $word | delta ;;
  "recent commit object name") git show --color=always $word | delta ;;
  *) git log --color=always -n 20 $word ;;
  esac'
 
# }}}
# {{{ Named Directories
# Make certain paths into named directories ("~name" instead of "/path/to/name")

# namedir name [path]
namedir () {
  local target
  if [[ $2 == "" ]]; then
    target=$(pwd)
  else
    target=$2
  fi

  hash -d $1=$target
}

# Give all projects a name
if [ -d ~/Projects ]; then
  for dir in ~/Projects/*(/N); do
    namedir "$(basename $dir)" "$dir"
  done
fi
# }}}
# {{{ Navigation
# Navigation tricks and shortcuts

setopt auto_pushd
setopt pushd_ignore_dups

# Enhanced cd:
#   * cd <path>/<file> go to <path>
cd () {
  if (( $# != 1 )); then
    builtin cd "$@"
  else
    if [[ -f "$1" ]]; then
      builtin cd "$1:h"
    else
      builtin cd "$1"
    fi
  fi
}

# Display contents of current directory when changing directories
showdir() { exa --group-directories-first }

# Tell terminal what the current directory is
update_osc7() {
  wezterm set-working-directory 2>/dev/null && return 0

  # In case wezterm is not installed, or if it failed do a naive manual try
  printf "\033]7;file://%s%s\033\\" "${HOSTNAME}" "${PWD}"
}

# Callback for when working directory changes
chpwd() {
  showdir
  update_osc7
}
# }}}
# {{{ Pager, man, and bat

# }}}
# {{{ Command replacements / aliases for commands with non-standard names
# {{{ Job control aliases and hacks
setopt auto_continue # CONT any disowned commands
setopt auto_resume   # "man" automatically resumes "man command" if in background ("man other" does not)
setopt check_jobs    # print job statuses on exit, and cancel exiting the first time
setopt hup           # HUP any jobs when exiting
# }}}
# {{{ Ruby development with Bundler / binstubs / etc.

bundle-exec () {
  if [ -f "bin/$1" ]; then
    echo "(→ bin/$*)"
    cmd=$1
    shift
    "bin/$cmd" "$@"
  elif [ -f Gemfile ]; then
    echo "(→ bundle exec $*)"
    command bundle exec "$@"
  else
    $@
  fi
}

binstub-exec() {
  if [ -f "bin/$1" ]; then
    echo "(→ bin/$*)"
    cmd=$1
    shift
    "bin/$cmd" "$@"
  else
    $@
  fi
}

alias bundle="binstub-exec bundle"
for gem in guard rspec rails rubocop rake standardrb yarn; do
  alias $gem="bundle-exec $gem"
done

# }}}
# {{{ Prompt settings and configuration

# Make RPROMPT disappear after running a command
setopt transient_rprompt

# From the manpage:
# If  the  PROMPT_SUBST option is set, the prompt string is first subjected to
# parameter expansion, command substitution and arithmetic expansion.
# See zshexpn(1).
setopt prompt_subst

#
# Setup VCS info for the prompt
#
autoload -Uz vcs_info

# Speed it up by removing systems I'm not using
zstyle ':vcs_info:*' enable git

zstyle ':vcs_info:*:prompt:*' use-prompt-escapes true
zstyle ':vcs_info:*:prompt:*' check-for-changes true

# Generate VCS info just before rendering prompt
function mange-prompt-precmd-vcs {
  vcs_info 'prompt'
}
add-zsh-hook precmd mange-prompt-precmd-vcs

# Convenience functions to disable/enable check-for-changes in certain sessions
function disable-check-for-changes() {
  zstyle ':vcs_info:*:prompt:*' check-for-changes false
}

function enable-check-for-changes() {
  zstyle ':vcs_info:*:prompt:*' check-for-changes true
}

#
# Helper functions to be used when building the prompt
#

# Keep track of how long a command runs for
function mange-prompt-preexec() {
  cmd_timestamp=$EPOCHSECONDS

  # shows the current dir and executed command in the title when a process is active
  (
    setopt nopromptsubst
    local terminal_title_format="$2 [%4~]"
    print -Pn "\033]0;${terminal_title_format}\007"
  )
}

# - Show time taken for long-running commands
# - Set terminal title
_mange_last_cmd_duration=
function mange-prompt-precmd() {
  local ret="$?"
  local stop=$EPOCHSECONDS
  local start=${cmd_timestamp:-$stop}
  _mange_last_cmd_duration=$((stop-start))
  unset cmd_timestamp

  # Set terminal title, using prompt format.
  local terminal_title_format="zsh [%4~]"
  print -Pn "\033]0;${terminal_title_format}\007"
}
add-zsh-hook preexec mange-prompt-preexec
add-zsh-hook precmd mange-prompt-precmd

# Actual prompt is set up using the "theme" function

# }}}
# {{{ Misc
# Disable flow control to allow ctrl-s and ctrl-q in terminal
stty -ixon -ixoff

# Autocompletion for Travis gem
[ -f $HOME/.travis/travis.sh ] && source $HOME/.travis/travis.sh
# }}}
# {{{ Theme and prompt design
apply_prompt_theme
# }}}

# Chain with true to avoid $? being false
[ -f "${XDG_CONFIG_HOME}/zsh/zshrc.after.local" ] && source "${XDG_CONFIG_HOME}/zsh/zshrc.after.local" || true
