#
# Global functions
#

global !p
def argument_names(arglist):
	names = []
	args = str(arglist).split(',')
	for arg in args:
		name = arg.strip().replace(':', ' ').split(' ', 1)[0]
		if name:
			names.append(name)
	return names

def write_instance_vars(names, snip, extra_indent = 0):
	snip.shift(1 + extra_indent)
	if len(names) == 0:
		snip += ''
	for name in names:
		snip += '@{} = {}'.format(name, name)
	snip.unshift(1 + extra_indent)

def write_delegated_arguments(names, snip):
	snip.shift(3)
	if len(names) == 0:
		snip += ''
	for name in names:
		snip += '{}: {},'.format(name, name)
	snip.unshift(3)

def write_attribute_readers(names, snip):
	snip.shift(1)
	if len(names) == 0:
		snip += ''
	else:
		symbols = [":{}".format(name) for name in names]
		snip += "attr_reader {}".format(", ".join(symbols))
	snip.unshift(1)

def required_kw_args(names, snip):
	arguments = []
	for name in names:
		arguments.append("{}:".format(name))
	return ", ".join(arguments)
endglobal

#
# Snippets
#
snippet req "require" b
require "${1:file}"
$0
endsnippet

snippet defi "def initialize ..."
def initialize($1)`!p write_instance_vars(argument_names(t[1]),snip)`$0
end
endsnippet

snippet spec "spec file ..."
# frozen_string_literal: true

require "${1:rails_helper}"

RSpec.describe ${2:`!p snip.rv = snip.basename.replace('_spec', '').title().replace('_', '')`} do
	$0
end
endsnippet

snippet classf "class file ..."
# frozen_string_literal: true

class ${1:`!p snip.rv = snip.basename.title().replace('_', '')`}
	$0
end
endsnippet

snippet modulef "module file ..."
# frozen_string_literal: true

module ${1:`!p snip.rv = snip.basename.title().replace('_', '')`}
	$0
end
endsnippet

snippet controller "controller file ..."
# frozen_string_literal: true

class ${1:`!p snip.rv = snip.basename.title().replace('_', '')`} < ${2:ApplicationController}
	$0
end
endsnippet

snippet service "service file ..."
# frozen_string_literal: true

class ${1:`!p snip.rv = snip.basename.title().replace('_', '')`}
	def self.call($2)
		new(`!p write_delegated_arguments(argument_names(t[2]),snip)`
		).call
	end

	def initialize(`!p snip.rv = required_kw_args(argument_names(t[2]),snip)`)`!p write_instance_vars(argument_names(t[2]),snip, 1)`
	end

	def call
		$0
	end

	private
	`!p write_attribute_readers(argument_names(t[2]), snip)`
end
endsnippet
