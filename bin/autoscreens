#!/usr/bin/env ruby
# TODO: Save different configurations somewhere so screens can be placed manually.
# TODO: Rewrite in Rust because we need to spread the Good News.

def print_usage
  puts <<-USAGE
USAGE: #$0 [--dry-run]

Sets up monitors on the current computer automatically. The biggest screen is
assumed to be to the left and be the primary screen. The others screens are to
the right of it, with the smallest screen furthest away.
USAGE
end

dry_run = false

while (arg = ARGV.shift)
  case arg
  when "--help"
    print_usage
    exit 0
  when "--dry-run"
    dry_run = true
  else
    puts "Unknown option #{arg}"
    print_usage
    exit 1
  end
end

class Monitor
  def self.parse(line)
    _, _, resolution, output = line.strip.split(/\s+/)
    px_width, _in_width, px_height, _in_height = resolution.split(/\D/, 4)
    new(output, width: px_width, height: px_height)
  end

  attr_reader :output, :width, :height

  def initialize(output, width:, height:)
    @output = output
    @width = width
    @height = height
  end

  def inspect
    "#{output}(#{width}x#{height})"
  end
end

monitors=`xrandr --listactivemonitors`.split("\n").map { |line|
  if line =~ /\d: /
    Monitor.parse(line)
  end
}.compact.sort_by(&:width).reverse

args = ([nil] + monitors).each_cons(2).flat_map { |prev, current|
  if prev.nil?
    ["--output", current.output, "--primary"]
  else
    ["--output", current.output, "--right-of", prev.output]
  end
}

require "shellwords"
puts "xrandr #{args.map(&:shellescape).join(" ")}"
unless dry_run
  exec("xrandr", *args)
end
