#!/bin/sh
set -e

if [ "$1" = "--help" ]; then
  cat <<EOF
Usage: dotfiles setup [ansible-playbook options]

Sets up the current machine using Ansible.

Examples:
  dotfiles setup
    Sets up everything.

  dotfiles setup -t dotfiles
    Only setup actual dotfiles, don't do most system stuff.

  dotfiles setup --skip-tags install-updates
    Skip installing updates, where possible to skip.
EOF
  exit 0
fi

if [ -z "${DOTFILES_PATH:-}" ]; then
  eval "$(dotfiles --env)"
fi
cd "${DOTFILES_PATH:?}"

ANSIBLE_PLAYBOOK="ansible-playbook"
ANSIBLE_GALAXY="ansible-galaxy"

missing_command() {
  ! hash "$1" >/dev/null 2>/dev/null
}

setup_arch() {
  if missing_command ansible-playbook; then
    sudo pacman -S --noconfirm --needed ansible
  fi
}

setup_centos() {
  ANSIBLE_PLAYBOOK="$HOME/.local/bin/ansible-playbook"
  ANSIBLE_GALAXY="$HOME/.local/bin/ansible-galaxy"

  if missing_command pip3; then
    sudo yum install --assumeyes python3
    sudo pip3 install --upgrade pip
  fi

  if [ ! -f "$ANSIBLE_PLAYBOOK" ]; then
    pip3 install ansible
  fi
}

case "$(uname -s)" in
Linux)
  if [ -f /etc/os-release ]; then
    dist=$(awk -F '=' '/^ID=/ { print $2 }' /etc/os-release | tr -d '"')
    case "$dist" in
    arch*)
      setup_arch
      ;;
    clearos | centos)
      setup_centos
      ;;
    *)
      echo "Not a supported dist: $dist"
      exit 1
      ;;
    esac
  fi
  ;;
*)
  echo "Not a supported system."
  exit 1
  ;;
esac

sudo -v

"$ANSIBLE_GALAXY" collection install -r requirements.yml

exec "$ANSIBLE_PLAYBOOK" \
  --connection=local --inventory localhost, \
  environment.yml \
  "$@"
