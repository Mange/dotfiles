#!/usr/bin/env bash

mbsync_config="${XDG_CONFIG_HOME:-$HOME/.config}/isync/mbsyncrc"
mail_dir="$HOME/Mail"

readarray -t mailboxes < \
  <(find "$mail_dir" -mindepth 1 -maxdepth 1 -type d -exec basename "{}" ";")

print_usage() {
  cat <<USAGE
Usage: $(basename "$0") [options] <commandsâ€¦>

Options:
  --help  - Show this help and exit

Commands:
  list [--no-names]
    List mailboxes.

  sync
    Sync all mailboxes, updating status during the sync.

  status [mailbox]
    Show current status or all, or selected mailbox.

  help
    Show this help and ext.
USAGE
}

perform_list() {
  local show_names="yes"
  [[ "$1" == "--no-names" ]] && show_names="no"

  for box in "${mailboxes[@]}"; do
    if [[ $show_names == "yes" ]]; then
      echo "${box} - $(get_box_name "$box")"
    else
      echo "${box}"
    fi
  done
}

perform_sync() {
  for box in "${mailboxes[@]}"; do
    name="$(get_box_name "$box")"
    echo "Syncing ${name}"

    unread_before="$(write_status "$box" "ðŸ”ƒ")"
    mbsync --config "$mbsync_config" "$box"
    unread_after="$(write_status "$box")"

    new_email=$((unread_after - unread_before))
    if [[ $new_email -gt 0 ]]; then
      notify-send \
        --icon /usr/share/icons/oxygen/base/32x32/actions/mail-message-new.png \
        --urgency low \
        --category email.arrived \
        --app-name "mailboxes" \
        "New email in ${name}" \
        "You have ${new_email} new email(s) in ${name}. Total unread is ${unread_after}."
    fi
  done
}

perform_status() {
  local box="$1"
  if [[ -n $box ]]; then
    read_status "$box"
  else
    for box in "${mailboxes[@]}"; do
      echo -n "$(get_box_name "$box"): "
      read_status "$box"
    done
  fi
}

read_status() {
  local box="$1"
  local statefile="${mail_dir}/${box}/.mailboxes-state"

  if [[ -f "$statefile" ]]; then
    cat "${mail_dir}/${box}/.mailboxes-state"
  else
    echo ""
  fi
}

write_status() {
  local box="$1"
  local icon="$2"
  local message
  local new_email
  new_email="$(count_new_mail "$box")"

  if [[ "$new_email" -gt 0 ]]; then
    message="${icon:-ðŸ“¬} ${new_email}"
  else
    message="${icon:-ðŸ“­} ${new_email}"
  fi

  echo "$message" > "${mail_dir}/${box}/.mailboxes-state"
  (set +e; polybar-msg hook mailboxes 1)
  echo "$new_email"
}

count_new_mail() {
  local box="$1"
  find \
    "${mail_dir}/${box}/Inbox/new" \
    "${mail_dir}/${box}/INBOX/new" \
    "${mail_dir}/${box}/inbox/new" \
    -type f \
    2> /dev/null \
    | wc -l
}

get_box_name() {
  local box="$1"

  if [[ -f "${mail_dir}/${box}/.mailboxes-name" ]]; then
    cat "${mail_dir}/${box}/.mailboxes-name"
  else
    echo "$box"
  fi
}

while [[ -n "$1" ]]; do
  case "$1" in
    --help | help)
      print_usage
      exit 0
      ;;
    list)
      shift
      perform_list "$@"
      exit 0
      ;;
    sync)
      shift
      perform_sync "$@"
      exit 0
      ;;
    status)
      shift
      perform_status "$@"
      exit 0
      ;;
    *)
      echo "Unknown option \"$1\"" >&2
      print_usage >&2
      exit 1
  esac
done
