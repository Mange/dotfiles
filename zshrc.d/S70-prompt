#! /bin/zsh

setopt prompt_subst
autoload colors
colors

# Reset formatting and color
rst="%{%b%s%u$reset_color%}"
# Invert the text if last command was unsuccessful
bgc="%{%(?.$rst.%S)%}"

# Left prompt. Displays current git branch in repository
# directories and potential problems present in the repo.
#
# Example usage:
# ~ % lprompt '[]' green red
# [~] 21:53 % 
#  ^    ^
#  |    |----- Red
#  |
#  |--- Green (Bold)
#
function lprompt {
     local color1 color2 ch1 ch2 field2
     color1="%{%B$fg[$2]%}"
     color2="%{%B$fg[$3]%}"
     ch1=${1[1]} # First char of first argument
     ch2=${1[2]} # Second char .........
     
     # When using screen, display the window
     field2="W$WINDOW"
     if [[ $WINDOW == "" ]]; then
          field2="%T" # When not using screen, display time
     fi

     # Git status and stuff
     local git_b git_s color_b color_s
     git_b='$(get_git_prompt_info '%b')'
     git_s='$(git_status)$(get_git_prompt_info '%s')'
     color_b="%{$fg[green]%}"
     color_s="%{$fg[red]%}"

     PROMPT="\
$ch1\
$color_b$git_b\
$color_s$git_s\
$color1%B%1~%b\
$ch2$rst \
$bgc$color2$field2$rst \
%#$rst "
}

# Get the directory information for the right prompt
function _rprompt_dir {
     local color_p git_p
     git_p=${$(get_git_prompt_info '%P')%% }
     color_p="%{$fg[yellow]%}"

     # Not a git dir, just output a prompt friendly char
     if test -z "$git_p" ; then
          echo -n "%~"
          return
     fi

     local lead rest
     # inject_named_dirs tries to shorten paths
     # by using the defined nameddirs
     # Please see S05-useful-functions
     lead=$(inject_named_dirs $git_p)
     rest=${${PWD#$git_p}#/}

     echo -n "$lead$color_p/$rest"
}
# Right prompt. Displays some git information when in
# a repository directory.
# Please note: All colors will be bolded
#
# Example usage:
#
# % rprompt '<>' green red blue
# % echo "Foo"                 <user@host:/etc/init.d>
#                                 ^     ^       ^
#                      green ---- |     |       |
#                          red -------- |       |
#                                   blue ------ |
#
function rprompt {
     local color1 color2 color3 ch1 ch2
     color1="%{%B$fg[$2]%}"
     color2="%{%B$fg[$3]%}"
     color3="%{%B$fg[$4]%}"
     ch1=${1[1]}
     ch2=${1[2]}

     local _dir='$(_rprompt_dir)'

     RPROMPT="\
$rst$ch1\
$color1%n$rst@$color2%m\
$rst:\
$color3%B$_dir%b\
$ch2$rst"
}

if [[ $UID == 0 ]]; then
     lprompt '<>' red red
     rprompt '<>' red red red
else
  lprompt '[]' blue cyan
  rprompt '()' green red blue

  # case $HOST in
  #   morbidus*)
  #     lprompt '[]' blue cyan
  #     rprompt '()' green red blue
  #     ;;

  #   cordelia*)
  #     lprompt '[]' blue cyan
  #     rprompt '()' green red blue
  #     ;;

  #   whiletrue*)
  #     lprompt '[]' blue cyan
  #     rprompt '()' green red blue
  #     ;;

  #   *)
  #     if [[ ${$(hostname -f)#*.} == (newsline|ad|pt|presstext).se ]]; then
  #         lprompt '[]' cyan blue
  #         rprompt '()' red blue yellow
  #     else
  #         lprompt '{}' white gray
  #         rprompt '()' white white gray
  #     fi
  #     ;;
  #     
  # esac
fi

unset rst bgc

